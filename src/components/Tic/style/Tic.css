@import url(./Cards.css);

.tic-game-wrapper {
  --PI: 3.14159265359;

  --card-size: min(10vh, 10vw);

  --game-layout-gap: min(5vh, 5vw);

  --board-size: min(80vh, 80vw);
  --center-size: 0.25;
  --marble-size: 0.043;

  --goal-offset: 0.15;

  --marble-slot-opacity: 0.4;

  --fields-radius: 0.44;

  display: flex;
  flex-direction: row;

  gap: var(--game-layout-gap);
  font-weight: 700;

  align-items: center;
  justify-content: center;

  height: 100%;
  width: 100%;
}

@media screen and (orientation:portrait) {
  .tic-game-wrapper {
    flex-direction: column
  }

  .tic-hand {
    flex-direction: row;
  }
}

.tic-game-wrapper * {
  box-sizing: border-box;
}

.tic-board {
  background-image: url("./walnut-wood-textured-background-design.jpg");
  background-size: 100%;

  position: relative;
  background-color: brown;

  flex-shrink: 0;

  width: var(--board-size);
  height: var(--board-size);
}

.tic-home-wrapper {
  position: absolute;
  display: grid;

  grid-template-columns: 1fr 1fr;
  grid-template-rows: 1fr 1fr;

  padding: calc(var(--board-size) * 0.025);

  width: 100%;
  height: 100%;
}

.tic-home-wrapper>.tic-home:nth-child(2) {
  justify-self: end;
}

.tic-home-wrapper>.tic-home:nth-child(3) {
  align-self: flex-end;
  justify-self: end;

  grid-row: 2/2;
  grid-column: 2/2;
}

.tic-home-wrapper>.tic-home:nth-child(4) {
  justify-self: start;
  align-self: flex-end;

  grid-row: 2/2;
  grid-column: 1/2;
}

.tic-home {
  display: grid;
  grid-template-columns: 1fr 1fr;
  grid-template-rows: 1fr 1fr;

  align-items: center;
  justify-items: center;

  width: calc(var(--board-size)* 0.13);
  height: calc(var(--board-size)* 0.13);
}

.tic-goal-wrapper {
  position: absolute;
  display: grid;

  grid-template-columns: 1fr 1fr;
  grid-template-rows: 1fr 1fr;

  width: 100%;
  height: 100%;
}

.tic-goal {
  display: flex;
  gap: calc(var(--board-size) * 0.01);
}

.tic-goal-wrapper>.tic-goal:nth-child(1) {
  flex-direction: column;
  justify-self: end;
  align-self: flex-end;
  transform: translate(calc(var(--board-size) * var(--marble-size)/2), calc(var(--board-size) * var(--goal-offset) * -1));
}

.tic-goal-wrapper>.tic-goal:nth-child(2) {
  flex-direction: row-reverse;
  justify-self: start;
  align-self: flex-end;
  transform: translate(calc(var(--board-size) * var(--goal-offset)), calc(var(--board-size) * var(--marble-size)/2));
}

.tic-goal-wrapper>.tic-goal:nth-child(3) {
  flex-direction: column-reverse;
  align-self: flex-start;
  transform: translate(calc(var(--board-size) * var(--marble-size)/2 * -1), calc(var(--board-size) * var(--goal-offset)));
  grid-row: 2/2;
  grid-column: 2/2;
}

.tic-goal-wrapper>.tic-goal:nth-child(4) {
  flex-direction: row;
  justify-self: end;
  align-self: start;
  transform: translate(calc(var(--board-size) * var(--goal-offset) * -1), calc(var(--board-size) * var(--marble-size)/2 * -1));
  grid-row: 2/2;
  grid-column: 1/2;
}

.tic-center {
  position: absolute;

  background-color: rgba(0, 0, 0, 0.6);
  border-radius: 100%;


  left: calc(var(--board-size) / 2);
  top: calc(var(--board-size) / 2);

  transform: translate(-50%, -50%);

  width: calc(var(--board-size) * var(--center-size));
  height: calc(var(--board-size) * var(--center-size));
}

.tic-marble-slot {
  background-color: rgba(120, 120, 120, var(--marble-slot-opacity));

  border-radius: 100%;
  border: calc(var(--board-size) * 0.005) solid black;

  z-index: 999;

  width: calc(var(--board-size) * var(--marble-size));
  height: calc(var(--board-size) * var(--marble-size));
}

.tic-marble-selectable {
  border-color: white;
}

.tic-marble-slot:hover {
  background-color: rgba(255, 255, 255, var(--marble-slot-opacity));
  filter: brightness(80%);
}

.tic-fields {
  position: absolute;

  width: var(--board-size);
  height: var(--board-size);
}

.tic-fields>.tic-marble-slot {
  position: absolute;

  left: calc((var(--board-size)/2) + ((var(--board-size)*var(--fields-radius)) * cos((var(--marble-index)/60) * (2*var(--PI)) - (var(--PI)/2)) - (var(--board-size) * var(--marble-size))/2));
  top: calc((var(--board-size)/2) + ((var(--board-size)*var(--fields-radius)) * sin((var(--marble-index)/60) * (2*var(--PI)) - (var(--PI)/2)) - (var(--board-size) * var(--marble-size))/2));
}